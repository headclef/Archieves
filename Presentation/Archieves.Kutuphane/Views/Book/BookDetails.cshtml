@using Archieves.Persistence.Concretes;
@model IEnumerable<Archieves.Domain.Entities.Book>
@{
    ViewData["Title"] = "BookDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var authorService = new AuthorService();
    var commentService = new CommentService();
}
<section class="banner-bottom">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 left-blog-info-w3layouts-agileits text-left">
                <!-- Details -->
                @foreach (var item in Model.ToList())
                {
                    <div class="blog-grid-top">
                        <div class="b-grid-top">
                            <div class="blog_info_left_grid">
                                <img src="@item.Image" class="img-fluid" alt="Book Image" height="50px" style="display: block; margin-left: auto; margin-right: auto;" />
                            </div>
                            <div class="blog-info-middle">
                                <ul>
                                    <li>
                                        <a href="~/Book/BookDetails/@item.Id">
                                            <img src="~/images/calendar.svg" height="15px"> @item.Date.ToString("dd/MM/yyyy")
                                        </a>
                                    </li>
                                    <li class="mx-2">
                                        @{
                                        }
                                        <a href="~/Book/BookDetails/@item.Id">
                                            <img src="~/images/feather.svg" height="15px" /> @authorService.GetById(item.AuthorId).Name @authorService.GetById(item.AuthorId).Surname
                                        </a>
                                    </li>
                                    <li>
                                        <a href="~/Book/BookDetails/@item.Id">
                                            <img src="~/images/comment.svg" height="15px" /> @commentService.GetAll().Where(x => x.BookId == item.Id).Count() Yorum
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <h3>
                            <p>@item.Name</p>
                        </h3>
                        <p style="text-align:justify;">@item.Description</p>
                    </div>
                }
                <!-- View Comments -->
                @foreach (var item in Model)
                {
                    @await Component.InvokeAsync("CommentListByBook", new { id = item.Id })
                }
                <!-- Add Comments -->
                @{
                    ViewBag.BookId = Model.Single().Id;
                    @await Html.PartialAsync("~/Views/Comment/PartialAddComment.cshtml")
                }
            </div>
        </div>
    </div>
</section>